#!/usr/bin/env python3

import subprocess

import rospy
from std_msgs.msg import String


class RosbagRecorder:

    def __init__(self):
        self.process = None
        self.is_recording = False


    def argos3_status_callback(self, data):
        if data.data == "Started":
            self.start_recording()
        elif data.data == "Stopped":
            self.stop_recording()
        else:
            rospy.logwarn(f"{rospy.get_caller_id()}: Unknown message body {data.data}")
    
    def start_recording(self):
        if self.is_recording:
            rospy.logwarn(f"{rospy.get_caller_id()}: Node is already recording")
            return
        rospy.loginfo(f"{rospy.get_caller_id()}: Starting recording")
        self.is_recording = True
        self.process = subprocess.Popen(["rosbag", "record", "-a", "-O", "test.bag"])
    
    def stop_recording(self):
        rospy.loginfo(f"{rospy.get_caller_id()}: Stopping recording")
        self.process.terminate()
    
def start_listening():

    # In ROS, nodes are uniquely named. If two nodes with the same
    # name are launched, the previous one is kicked off. The
    # anonymous=True flag means that rospy will choose a unique
    # name for our 'listener' node so that multiple listeners can
    # run simultaneously.
    rospy.init_node('tycho_recorder_node', anonymous=True)
    recorder = RosbagRecorder()
    rospy.Subscriber("/argos3/status", String, recorder.argos3_status_callback)
    rospy.on_shutdown(recorder.stop_recording)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    start_listening()
